#include <stdlib.h>
#include <stdio.h>



typedef struct Node{
    int  dado;
    struct Node *esquerda;
    struct Node *direita;
}Node;

typedef struct root{
    Node *root;
}Root;


Root* criarRaiz();
Node* criarNode(int);
void inserir(Root*, int);
Node* remover(Node*,int);
Node* Achamin(Node*);
int verificaFolha(Node*);
int verificaVazia(Node*);
void preOrdem(Node*);     
void emOrdem(Node*);      
void posOrdem(Node*);


int main(){
   Root* raiz = criarRaiz();
    inserir(raiz,2);
    inserir(raiz,1);
    inserir(raiz,7);
    inserir(raiz,4);
    inserir(raiz,5);
    inserir(raiz,3);
    inserir(raiz,8);
    
   
   preOrdem(raiz->root);
   printf("\n");
   emOrdem(raiz->root);
   printf("\n");
   posOrdem(raiz->root);
   
   
   
  
}



Root* criarRaiz(){
    Root* root = (Root*) malloc(sizeof(Root));
    root->root = NULL;
    return root;
}

Node* criarNode(int dado){
    Node* node = (Node*) malloc(sizeof(Node));
    node->esquerda = NULL;
    node->direita = NULL;
    node->dado = dado;
    return node;
}

void inserir(Root* raiz, int dado){
    Node* auxiliar;
    
        if(verificaVazia(raiz->root)){
            raiz->root = criarNode(dado);
        }else{
            auxiliar = raiz->root;
            
            while(1){
                if(dado > auxiliar->dado){
                    if(verificaVazia(auxiliar->direita)){
                        auxiliar->direita = criarNode(dado);
                        return;
                    }else{
                        auxiliar = auxiliar->direita;
                    }    
                }else{
                    if(verificaVazia(auxiliar->esquerda)){
                        auxiliar->esquerda = criarNode(dado);
                        return;
                    }else{
                        auxiliar = auxiliar->esquerda;
                    }
                }
            }
        }
        
}

Node* remover(Node* node, int dado){
     Node *auxiliar;
    if(node == NULL){
        printf("Elemento n√£o encontrado");
    }
    else if(dado < node->dado){
        node->esquerda = remover(node->esquerda, dado);
    }
    else if(dado > node->dado){
        node->direita = remover(node->direita, dado);
    }
    else{
        if(node->direita && node->esquerda){
            auxiliar = Achamin(node->direita);
            node->dado = auxiliar->dado; 
            node->direita = remover(node->direita,auxiliar->dado);
        }
        else{
            auxiliar = node;
            if(node->esquerda == NULL)
                node = node->direita;
            else if(node->direita == NULL)
                node = node->esquerda;
            free(auxiliar); 
        }
    }
    return node;
}

Node* Achamin(Node* node){
    Node* auxiliar;
    auxiliar = node;
    
    while(auxiliar->esquerda != NULL){
    auxiliar = auxiliar->esquerda;
    }
    return auxiliar;
}

int verificaFolha(Node* node){ 
  if (node->esquerda == NULL && node->direita == NULL){
      return 1; 
  }else{
      return 0;
  }

}

int verificaVazia(Node* node){
  if (node == NULL){
       return 1; 
  }else{
      return 0;
  }
}

void preOrdem(Node* raiz){
  if (!verificaVazia(raiz)){
    printf("[%i] ", raiz->dado);
    emOrdem(raiz->esquerda);
    emOrdem(raiz->direita);
  }
  printf("|");
}


void emOrdem(Node* raiz){
  if (!verificaVazia(raiz)){
    emOrdem(raiz->esquerda);
    printf("[%i] ", raiz->dado);
    emOrdem(raiz->direita);
  }
}


void posOrdem(Node* raiz){
  if (!verificaVazia(raiz)){
    emOrdem(raiz->esquerda);
    emOrdem(raiz->direita);
    printf("[%i] ", raiz->dado);
  }
}







